// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Users represent authenticated principals in the system
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  firstName     String
  lastName      String
  isActive      Boolean        @default(true)
  // Relations
  roles         UserRole[]
  tours         Tour[]         @relation("AssignedTours")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

/// Roles group permissions and can be assigned to users
model Role {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String?
  // Relations
  permissions   RolePermission[]
  users         UserRole[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

/// Permissions are atomic capabilities used by RBAC
model Permission {
  id          String           @id @default(cuid())
  key         String           @unique
  description String?
  // Relations
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

/// Join table between User and Role
model UserRole {
  userId  String
  roleId  String
  assignedAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

/// Join table between Role and Permission
model RolePermission {
  roleId       String
  permissionId String
  grantedAt    DateTime @default(now())

  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

/// Competitor stores with geolocation
model CompetitorStore {
  id           String    @id @default(cuid())
  name         String
  competitor   String
  address      String?
  city         String?
  country      String?
  latitude     Float
  longitude    Float
  // Optional metadata
  phone        String?
  website      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Index on geolocation for faster lookup
  @@index([latitude, longitude])

  // Back relation to tours assigned to this store
  tours        Tour[]    @relation("StoreTours")
}

/// Tours (missions) scheduling
model Tour {
  id              String           @id @default(cuid())
  collaboratorId  String?
  assignedStoreId String?
  name            String
  missionType     String
  department      String? // rayon concern√©
  startDate       DateTime
  endDate         DateTime
  notes           String?

  collaborator    User?            @relation("AssignedTours", fields: [collaboratorId], references: [id], onDelete: SetNull)
  assignedStore   CompetitorStore? @relation("StoreTours", fields: [assignedStoreId], references: [id], onDelete: SetNull)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([collaboratorId])
  @@index([assignedStoreId])
}
